#!/usr/bin/perl -CSDAL

use warnings;
use strict;
use Getopt::Long qw(:config no_ignore_case);
use Net::IP;
use Regexp::IPv6;

Getopt::Long::Configure ("bundling");

my $fn_iserv_cfg = "/var/lib/iserv/config/config.pm";
my %lan_interfaces;

my $conf;

if (-r $fn_iserv_cfg)
{
  $conf = (require $fn_iserv_cfg);
}

if (defined $conf->{LANInterfaces})
{
  %lan_interfaces = map { $_ => 1 } @{ $conf->{LANInterfaces} };
}

my $m_if = qr/[\w.-]+/;
my $m_hex = qr/[0-9a-f]{2}/;
my $m_mac = qr/$m_hex(?::$m_hex){5}/;
my $m_scope = qr/global|link|host/;
my $m_ip6 = qr/$Regexp::IPv6::IPv6_re/;
my $m_ip4 = qr/\d{1,3}(?:\.\d{1,3}){3}/;

my @out;
my %opt;

GetOptions(\%opt,
  "format|f=s",
  "help|h",
  "global|g",
  "interface|i=s@",
  "lan|l",
  "linklocal|p",
  "uniquelocal|u",
  "quiet|q",
  "wan|w"
) or $opt{help} = 1;

$opt{format} = shift @ARGV if not $opt{format} and @ARGV;
$opt{format} //= "ip/length";
my %interfaces = map { $_ => 1 } @{ $opt{interface} };
$opt{interface} = \%interfaces;

my $count = grep { exists $opt{$_} } ("global", "linklocal", "uniquelocal");

# display all by default
if ($count < 1)
{
  $opt{global} = 1;
  $opt{linklocal} = 1;
  $opt{uniquelocal} = 1;
}

die "You shall not combine --wan and --lan!\n" if $opt{lan} and $opt{wan};

exit 1 
  if $opt{lan} and not keys %lan_interfaces;

print <<USAGE and exit if $opt{help};
Usage: netquery6 [options] [format]
Options:
	-h, --help                   		show this help

	-f=<format>, --format=<format>		format to print (available keywords:
	                              		ip, prefix, length, scope, mac, nic,
                             			valid, preferred, suffix) - default:
	                             		ip/length

	-g,          --global        		only print global addresses

 	-i,          --interface     		only print addresses assigned to this
	                             		network interface

	-l,          --lan           		only print addresses of interfaces
	                             		which are marked as lan

	-p,          --linklocal     		only print link-local addresses

	-u,          --uniquelocal   		only print unique-local addresses

	-q,          --quiet         		do not output anything

	-w,          --wan           		only print addresses of interfaces which
		                             	are not marked as lan

Either --format as option or to supply the format as regular argument after
option is allowed. If no matching addresses are found, netquery6 returns
exit code 1.
USAGE

sub ip_in_net($$)
{
  my ($net, $ip) = @_;

  $net = new Net::IP($net);
  $ip = new Net::IP($ip);

  $net->overlaps($ip, $net) eq $Net::IP::IP_B_IN_A_OVERLAP;
}

sub parse(@)
{
  my $line = shift;

  while (defined $line)
  {
    if ($line =~ /^\d+: ($m_if)(\@$m_if)?:/)
    {
      my $nic = $1;
      
      $line = shift;
      return if !defined $line;
 
      if ($line =~ /^ {4}link\/ether ($m_mac) brd $m_mac( |$)|link\/sit ($m_ip4) peer ($m_ip4)/)
      {
        my $mac = $1 if $1;
        $mac //= "";

        $line = shift;
        return if !defined $line;

        while ($line =~ /^ {4}/)
        {
          if ($line =~ /^ {4}inet\s/)
          {
            # noop
            $line = shift;
            return if !defined $line;

            $line = shift if $line =~ /\ {7}valid_lft /; # kernel > 3.2
            return if !defined $line;
          }
          elsif (my ($ip, $length, $scope) = $line =~ /^ {4}inet6 ($m_ip6)\/(\d+)\sscope\s($m_scope)/)
          {
            # ignore temporary ipv6 addresses (privay extensions)
            if ($line =~ /temporary/)
            {
              $line = shift;
              return if !defined $line;
              $line = shift
                if (defined $line and $line =~ /^\ {7}valid_lft /);
              return if !defined $line;
              next;
            }

            $ip = Net::IP::ip_expand_address($ip, 6);

            my $raw = unpack("B*", pack("H*", join "", split/:/, $ip));
            my $id_length = 128 - $length;
            my $raw_prefix = substr($raw, 0, -$id_length);
            my $prefix = join(":", unpack("(A4)*", unpack("H*", pack("B*", $raw_prefix))))."::";
            my $raw_suffix = substr($raw, -$id_length);
            my $suffix = join(":", unpack("(A4)*", unpack("H*", pack("B*", $raw_suffix))));

            my %row;
            $row{ip} = $ip;
            $row{prefix} = $prefix;
            $row{suffix} = $suffix;
            $row{length} = $length;
            $row{scope} = $scope;
            $row{mac} = $mac;
            $row{nic} = $nic;
            $row{linklocal} = ip_in_net "fe80::/10", "$ip/128";
            $row{uniquelocal} = ip_in_net "fc00::/7", "$ip/128";

            $line = shift;

            if (defined $line and $line =~ /^\ {7}valid_lft /)
            {
              my ($valid, $preferred) = $line =~ /^\ {7}valid_lft (?:(\d+)sec) preferred_lft (?:(\d+)sec)/;
              my $time = time;
              $row{valid} = $time + $valid if defined $valid;
              $row{valid} //= "forever";
              $row{preferred} = $time + $preferred if defined $preferred;
              $row{preferred} //= "forever";
              $line = shift;
            }

            push @out, \%row if not $nic =~ /^docker|^veth/ and
               (keys %{ $opt{interface} } == 0 or exists $opt{interface}->{$nic})
            ;

            return if !defined $line;
          }
          else
          {
            warn "parse error, unknown address family: $line\n";
            $line = shift;
            return if !defined $line;
          }
        }
      }
      elsif ($line =~ /^ {4}link\/(loopback|ppp|none|sit) /)
      {
        # loopback -> ignore because lo is often handled specially
        # ppp* -> ignore because dynamic
        # sit -> ignore because it only contains information about
        #  tunnel endpoints, used information are parsed above
        # tun* is shown as link/none -> ignore because dynamic
        do { $line = shift; return if !defined $line; } while $line =~ /^ {4}/;
      }
      else
      {
         warn "parse error, unknown link: $line\n";
         $line = shift;
         return if !defined $line;
      }
    }
    else {
      warn "parse error, unknown interface: $line\n";
      $line = shift;
      return if !defined $line;
    }
  }
}

parse split /\n/, qx(/sbin/ip address show up);

my $out = 0;
for my $ip (@out)
{
  my $output = "$opt{format}\n";
  my $global = 0;
  my $linklocal = 0;
  my $uniquelocal = 0;

  $ip->{linklocal} and $linklocal = 1;
  delete $ip->{linklocal};
  $ip->{uniquelocal} and $uniquelocal = 1;
  delete $ip->{uniquelocal};

  # default to global scope as wanted by rfc
  $global = 1 if !$linklocal and !$uniquelocal;

  if ($opt{lan} and !defined $lan_interfaces{$ip->{nic}})
  {
    next;
  }

  if ($opt{wan} and defined $lan_interfaces{$ip->{nic}})
  {
    next;
  }

  for my $field (sort keys %{ $ip })
  {
    $output =~ s/$field/$ip->{$field}/g;
  }

  next if $global and !$opt{global};
  next if $linklocal and !$opt{linklocal};
  next if $uniquelocal and !$opt{uniquelocal};

  print $output if !$opt{quiet};
  $out++;
}

exit 1 if !$out;
